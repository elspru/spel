.349683911.mu.elspru.nwo topic-case encode perfective-aspect work I-feel-happy benefactive-case #SPEL realis-mood
.349683B63.mu.elspru.nwo topic-case unit check perfective-aspect create inessive-case virtual-machine.c benefactive-case #SPEL I-feel-satisfied realis-mood
.3496842A6.mu.elspru.nwo TOP name autotools PFV work BEN #SPEL I-feel-belongingness REAL
.349684754.mu.elspru.nwo TEL revision ACC aspect GEN last sentence DAT imperfective-aspect PREC
.349748806.mu.pyic.nwo faster than C, more portable than English #dream #SPEL
.349748870.mu.pyic.nwo main() file optimized for L2 cache, using L1 cache optimized functions for processing.
.349809780.mu.pyic.nwo 32KB is good estimate for modern #CPU L1 #cache
.349809A46.mu.pyic.nwo 4096B is hard-disk page size on Linux, so is best lump size to work with.
.34985307A.mu.pyic.nwo with cache optimizaiton reading, filtering, tokenizing, encoding and writing over 18k words within 0.02 seconds on a ~100 bogomips processor
.349853117.mu.pyic.nwo with cache optimizaiton reading, filtering, tokenizing, encoding and writing over 18k words within 0.02s with ~100 bogomips core
.349893044.mu.pyic.nwo  /window 3
.34989357B.mu.pyic.nwo seems like it'll be trocpyac /troʃpyaʃ/ now, is lyac is now iron
.349893647.mu.pyic.nwo also just fixed my repost bot to stop posting irc message typos like /window 3
.349893769.mu.pyic.nwo so next on the agenda is writing up the specifications for the virtual-machine instruction set architecture.
.34999A587.mu.pyic.nwo adding #NGSL, #NAWL, and #TOEIC word lists to #SPEL
.34999A79A.mu.pyic.nwo It's amazing how it doesn't seem to matter how many words I pump into SPEL, it always comes out to under 3000 unique internationally recognized meanings in total.
.34999A920.mu.pyic.nwo adding #NGSL, #NAWL, and #TOEIC word lists to #SPEL
.34999A9A4.mu.pyic.nwo So far even with close to 9000 starter words, it always comes out to under 3000 unique internationally recognized meanings in total.
.34999AAB1.mu.pyic.nwo #SPEL #wordoftheday rarefied, meaning low density. In SPEL air can't be thin, but it can be rarefied.
.34999B030.mu.pyic.nwo the illusion person appear to take a penny from rarefied air.
.34999B348.mu.pyic.nwo on massive hill the air is rareified as in Tibet.
.349A2051B.mu.pyic.nwo  is working on virtual machine for human grammar programming language, with strict caching rules, for heterogeneous multi processors and AGI development.
.349A20545.mu.pyic.nwo it's libreware, not for sale. though hoping on making a SPELCoin later, with which people can bid of feature requests, others could solve feature requests with GPU run program generating AI algorithms.
.349A20561.mu.pyic.nwo 's purpose is high quality OS for incarnating into robots.
.349A65448.mu.pyic.nwo #grid_computing, evolving #AGI, with computers writing programs, and acruing crypto currency.
.349A65923.mu.pyic.nwo wouldn't it be nice, when you want that extra feature, just get your computer to program it for you.
.349A65988.mu.pyic.nwo or ask the grid, and offer a cryptocoin bounty, and all will have the new feature available.
.349A6605B.mu.pyic.nwo #boinc and #bitcoin are the largest grid computing networks currently.  BOINC pays in #gridcoin
.349A66225.mu.pyic.nwo 1 #gridcoin is $0.01USD, one #bitcoin is $456.73USD, what's the difference? can buy stuff with bitcoin.
.349A67224.mu.pyic.nwo #genetic_programming #gene_expression_programming #grammatical_evolution
.349B48B96.mu.pyic.nwo #free_book: "A Field Guide to #Genetic_Programming" http://bit.ly/1rGkfFf
.349B49099.mu.pyic.nwo Slash/A #slasha seems to be an ideal model language for making #SPEL #genetic_programming compatible.
.349B49128.mu.pyic.nwo #SlashA http://bit.ly/1NqCs3n is #GPLv3 so may be able to reuse the code base
.349BA5A58.mu.elspru.nwo #program_synthesis is the key to #Seed_AI and #Artificial_Superintelligence
.349BA6532.mu.elspru.nwo 20 amino acids is limit of gene expression, more yields excess mutation. Can have 20 as max instruction count for #genetic_programming
.349BA6797.mu.elspru.nwo There are about 500 amino acids, only 20 are coded by DNA, so up to 20 instructions for #genetic_programming
.349BA9B8B.mu.elspru.nwo #parsimony_coefficient equal to covariance of length and fitness divided by variance of length. reduces #bloat in #genetic_programming
.349BAA016.mu.pyic.nwo #parsimony_coefficient equal to covariance of length and fitness divided by variance of length. reduces #bloat #genetic_programming
.349BAB535.mu.pyic.nwo imagine a #programming_language, where the libraries are written by computers via #genetic_programming
.349BAB5B7.mu.pyic.nwo a user may wish to specify which (extra) functions may be useful for solving a particular problem by #genetic_programming
.349BAB677.mu.pyic.nwo imagine a #programming_language, where the libraries are written by computers via #genetic_programming
.349BAB682.mu.pyic.nwo a user may wish to specify which (extra) functions may be useful for solving a particular problem by #genetic_programming
.34A006477.mu.pyic.nwo like #DNA #linear_genetic_programming has #introns which protect good segments from damage by crossover
.34A006620.mu.pyic.nwo #DNA #introns are removed from protein-synthesizing #messenger_RNA  which increases runtime performance
.34A011BB1.mu.elspru.nwo #introns delimit #exons, allowing more effective crossover #genetic_operators in #genetic_programming
.34A027196.mu.elspru.nwo it's wonderful living a computer enhanced life.
.34A02749A.mu.elspru.nwo mined all relevant #linear_genetic_programming material from over 60 textbooks in a few minutes.
.34A02AA79.mu.elspru.nwo reading at 300-500 WPM comfortably with Dictator #RSVP http://bit.ly/1slI6dK
.34A02B075.mu.elspru.nwo amount of working memory per function, should be proprotional to parameters and output complexity #programming
.34A02B8B6.mu.elspru.nwo evolving on multiple islands or demes, with limited migration, improves diversity and hastens progress #genetic_programming
.34A02B95A.mu.elspru.nwo now reading at around 700WPM thanks to Dictator #RSVP http://bit.ly/1slI6dK #speedreading
.34A030B44.mu.elspru.nwo #multi_expression_programming form of #linear_genetic_programming uses variable length "#chromosomes" but I think they mean #exons
.34A050781.mu.elspru.nwo for a first #evolved_program I'm thinking of making a numeric base conversion function, in two stages, single and multi digit #LGP
.34A050B92.mu.elspru.nwo 0-9 A-Z '_' a-z and '~' for radix 64, an #ASCII extension of #hexadecimal, base 60 #sexagesimal is good for rational number fractions
#SPEL 20 writing words making feature